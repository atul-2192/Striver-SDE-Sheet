struct Node{
    Node* links[26];
    bool isEnd=false;

    bool containKey(char ch)
    {
        return links[ch-'a']!=NULL;
    }
    void put(char ch)
    {
        Node* newNode=new Node();
        links[ch-'a']=newNode;

    }
    Node* get(char ch)
    {
        return links[ch-'a'];
    }
    void setEnd()
    {
        isEnd=true;
    }
    bool getEnd()
    {
        return isEnd;
    }
};

class Trie{
    private:
    Node* root;
    public:
    Trie()
    {
        root=new Node();
    }
    void insert(string &word)
    {
        int n=word.length();
        Node* curr=root;
        for(int i=0;i<n;i++)
        {   char ch=word[i];
            if(!curr->containKey(ch))
            {
                    curr->put(ch);
            }
            curr=curr->get(ch);
        }
        curr->setEnd();
    }

    bool search(string &word)
    {
        int n=word.length();
        Node* curr=root;
        for(int i=0;i<n;i++)
        {
            char ch=word[i];
            if(!curr->containKey(ch)) return false;
            curr=curr->get(ch);
        }
        return curr->getEnd();
    }
};
int countDistinctSubstrings(string &s)
{
    Trie trie;
    int n=s.length();
    int countDistinct=0;
    for(int i=0;i<n;i++)
    {   string temp="";
        for(int j=i;j<n;j++)
        {
            temp+= (char)s[j];
            if(trie.search(temp)==false)
            {
                trie.insert(temp);
                countDistinct++;
            }
        }
    }
    return countDistinct+1;
    //    Write your code here.
}
