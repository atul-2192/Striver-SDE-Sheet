#include <bits/stdc++.h> 

struct Node{
    Node* links[26];
    bool isEnd=false;

    bool containKey(char ch)
    {
        return links[ch-'a']!=NULL;\
        
    }
    void put(char ch)
    {
        Node* newNode=new Node();
        links[ch-'a']=newNode;
    }
    Node* get(char ch)
    {
        return links[ch-'a'];
    }
    void setEnd()
    {
        isEnd=true;
    }
    bool getEnd()
    {
        return isEnd;
    }
};
class Trie
{
    private: 
    Node* root;
    public:
    Trie()
    {
        root=new Node();
    }
    void insert(string &word)
    {
        int n=word.length();
        Node* curr= root;
        for(int i=0;i<n;i++)
        {
            char ch=word[i];
            if(!curr->containKey(ch))
            {
                curr->put(ch);
            }
            curr=curr->get(ch);
        }
        curr->setEnd();
    }          
    bool search(string& word)
    {
        int n=word.length();
        Node* curr=root;
        for(int i=0;i<n;i++)
        { char ch=word[i];
            if(!curr->containKey(ch))
            {
                return false;
            }
            curr=curr->get(ch);
            if(!curr->getEnd()) return false;
        }
        return curr->getEnd();
    }                 
};
string completeString(int n, vector<string> &a){
    // Write your code here.
  Trie trie;
 string ans="";
    for(int i=0;i<n;i++)
    {
        trie.insert(a[i]);
    }
    for(int i=0;i<n;i++)
    {
        if(trie.search(a[i]))
        {
            if(a[i].length()>ans.length())
            {
                ans=a[i];
            }
            else if(a[i].length()==ans.length()&&a[i]<ans)
            {
                ans=a[i];
            }
        }
    }
    if(ans.length()==0) return "None";
    return ans;
}
