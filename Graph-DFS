void dfs(int i, vector<int>adj[],vector<bool>&visited, vector<int>&temp)
{
    temp.push_back(i);
    visited[i]=true;

    for(auto x:adj[i])
    {
        if(visited[x]==false)
        {
            dfs(x,adj,visited,temp);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<int> adj[V];
    for(auto x: edges)
    {
        adj[x[0]].push_back(x[1]);
        adj[x[1]].push_back(x[0]);
    }
    vector<vector<int>>ans;
    vector<bool>visited(V,false);
    for(int i=0;i<V;i++)
    {
        if(visited[i]==false)
        {
            vector<int>temp;
            dfs(i,adj,visited,temp);
            ans.push_back(temp);

        }
    }
//    ans.insert(ans.begin(),{ans.size()});
    return ans;

}
