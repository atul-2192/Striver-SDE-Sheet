struct Node{
    Node* node[26]={NULL};
    bool isEnd=false;

    bool containKey(char ch)
    {
        return node[ch-'a']!=NULL;
    }
    void putKey(char ch)
    {
        Node* newNode=new Node();
        node[ch-'a']=newNode;
    }

    Node* get(char ch)
    {
        return node[ch-'a'];
    }
    void setEnd()
    {
        isEnd=true;
    }

};

class Trie {
    private:
    Node *root;
public:
    Trie() {
        root=new Node();
    }
    
    void insert(string word) {
        Node* curr=root;
        int n= word.length();
        for(int i=0;i<n;i++)
        {  char ch=word[i];
            if(!curr->containKey(ch))
            {
                curr->putKey(ch);
            }
            curr=curr->get(ch);
        }
        curr->setEnd();
    }
    
    bool search(string word) {
        int n=word.length();
        Node* curr= root;
        for(int i=0;i<n;i++)
        { char ch= word[i];
            if(!curr->containKey(ch))
            {
                return false;
            }
            curr=curr->get(ch);
        }
        if(curr->isEnd==true) return true;
        return false;
    }
    
    bool startsWith(string word) {
         int n=word.length();
        Node* curr= root;
        for(int i=0;i<n;i++)
        { char ch= word[i];
            if(!curr->containKey(ch))
            {
                return false;
            }
            curr=curr->get(ch);
        }
       return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
